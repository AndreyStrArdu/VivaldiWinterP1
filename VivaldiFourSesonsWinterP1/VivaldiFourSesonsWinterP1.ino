/*
  Vivaldi, Four sesons, Winter

  Circuit:
  - 8 ohm speaker on digital pin 8

  Created 13 Jul 2023
  by Andrey Stratonov

  Version: 1.0

*/

#include "pitches.h"

// notes in the melody:
int melody[] = {
 //2:
  G4, G4, G4, G4, G4, G4, G4, G4,
  CS5, CS5, CS5, CS5, CS5, CS5, CS5, CS5,
  AS5, AS5, AS5, AS5, AS5, AS5, AS5, AS5,
  AS5, AS5, AS5, AS5, AS5, AS5, AS5, AS5, 
  GS5, GS5, GS5, GS5, GS5, GS5, GS5, GS5,
  CS5, CS5, CS5, CS5, CS5, CS5, CS5, CS5,
  DS5, DS5, DS5, DS5, DS5, DS5, DS5, DS5,
  D5, D5, D5, D5, D5, D5, D5, D5, 
  DS5, DS5, DS5, DS5, DS5, DS5, DS5, DS5,  
  DS5, DS5, DS5, DS5, D5, D5, D5, D5, 
  C5, C6, C6, G5, G5, DS5, DS5, C5, C5, C6, C6, G5, G5, DS5, DS5, C5,  C5, C6, AS5, GS5, G5, F5, DS5, D5, C5, C6, AS5, GS5, G5, F5, DS5, D5, 
  C5, G4, C5, DS4, C5, G4, C5, DS4, C5, G4, C5, DS4, C5, G4, C5, DS4, C4, G4, G4, G4, 
  G4, G4, G4, G4, C5, C6, C6, G5, G5, DS5, DS5, C5, C5, C6, C6, G5, G5, DS5, DS5, C5, 
  C5, C6, AS5, GS5, G5, F5, DS5, D5, C5, C6, AS5, GS5, G5, F5, DS5, D5, C5, G4, C5, DS4, C5, G4, C5, DS4, C5, G4, C5, DS4, C5, G4, C5, DS4, 
  C4, C4, C4, C4, C4, C4, C4, C4, 
  C5, C6, C6, G5, G5, DS5, DS5, C5, C5, C6, C6, G5, G5, DS5, DS5, C5, C5, C6, AS5, GS5, G5, F5, DS5, D5, C5, C6, AS5, GS5, G5, F5, DS5, D5, 
  C5, G4, C5, DS4, C5, G4, C5, DS4, C5, G4, C5, DS4, C5, G4, C5, DS4, C5, C5, C5, C5, 
  C5, C5, C5, C5, E5, E5, E5, E5, 
  GS4, F4, F4, F4, F4, F4, F4, F4, FS4, F4, F4, F4, F4, F4, F4, F4, 
  A4, F4, F4, F4, F4, F4, F4, F4, AS4, F4, F4, F4, F4, F4, F4, F4, 
  B4, F4, F4, F4, F4, F4, F4, F4, C5, G5, E5, G5, E5, G5, E5, G5, E5, G5, G5, G5, 
  GS5, C5, GS5, C5, GS5, C5, GS5, C5, GS4, CS5, F4, CS5, F4, CS5, F4, CS5, F4, CS5, CS5, CS5, 
  G5, CS5, G5, CS5, G5, CS5, G5, CS5, G4, C5, DS4, C5, DS4, C5, DS4, C5, DS4, C5, C5, C5, 
  F5, C5, F5, C5, F5, C5, F5, C5, F4, AS4, CS4, AS4, CS4, AS4, CS4, AS4, CS4, AS4, AS4, AS4, 
  E5, AS4, E5, AS4, E5, AS4, E5, AS4, F5, E5, F5, G5, F5, G5, E5, F5, G5, F5, G5, GS5, G5, GS5, F5, G5, 
  A5, G5, A5, AS5, A5, AS5, G5, A5, AS5, A5, AS5, C6, AS5, C6, A5, AS5, C6, 0, C6, CS6, DS6, F6,  C6, CS6, DS6, F6, C6, CS6, DS6,  
  F6, DS6, CS6, C6, F6, DS6, CS6, C6, F6, DS6, CS6, C6, F6, DS6, CS6, C6, F5, G5, GS5, AS5, C6, CS6, DS6, F6, F5, G5, GS5, AS5, C6, CS6, DS6, F6, 
  CS6, 0, AS5, C6, CS6, DS6, AS5, C6, CS6, DS6, AS5, C6, CS6, DS6, CS6, C6, AS5, DS6, CS6, C6, AS5, DS6, CS6, C6, AS5, DS6, CS6, C6, AS5, 
  DS5, F5, G5, GS5, AS5, C6, CS6, DS6, DS5, F5, G5, GS5, AS5, C6, CS6, DS6, C6, 0, GS5, AS5, C6, CS6,  GS5, AS5, C6, CS6, GS5, AS5, C6, 
  CS6, C6, AS5, GS5, CS6, C6, AS5, GS5, CS6, C6, AS5, GS5, CS6, C6, AS5, GS5, G5, AS5, GS5, G5, C6, AS5, GS5, G5, F5, GS5, G5, F5, AS5, GS5, G5, F5, 
  E5, C5, AS4, C5, G4, C5, AS4, C5, E5, G5, F5, G5, AS5, G5, F5, G5, E5, C5, AS4, C5, G4, C5, AS4, C5, E5, G5, F5, G5, AS5, G5, F5, G5, 
  E5, AS5, GS5, AS5, E5, G5, F5, G5, G4, AS4, GS4, AS4, E4, G4, F4, G4, AS3, AS4, E4, AS4, E4, AS4, E4, AS4, E4, AS4, E4, AS4, E4, AS4, 0, 
  GS4, C5, AS4, C5, GS4, C5, AS4, C5, F5, C5, AS4, C5, GS4, C5, AS4, C5, A5, C5, A5, C5, A5, C5, A5, C5, A5, C5, A5, C5, A5, C5, A5, C5, 
  AS5, D5, C5, D5, F5, D5, C5, D5, AS4, D5, C5, D5, F5, D5, C5, D5, B5, D5, B5, D5, B5, D5, B5, D5, B5, D5, B5, D5, B5, D5, B5, D5, 
  C6, DS5, D5, DS5, G5, DS5, D5, DS5, C6, DS5, D5, DS5, G5, DS5, D5, DS5, D5, F4, D5, F4, D5, F4, D5, F4, D5, F4, D5, F4, D5, F4, D5, F4, 
  DS5, G4, F4, G4, DS5, G4, F4, G4, DS5, G4, F4, G4, DS5, G4, F4, G4, DS5, F4, DS5, F4, DS5, F4, DS5, F4, DS5, F4, DS5, F4, DS5, F4, DS5, F4, 
  D5, F4, D5, F4, D5, F4, D5, F4, D5, F4, D5, F4, D5, F4, D5, F4, G4, 
 //39:
  F4, F4, F4, F4, GS4, GS4, GS4, GS4, 
  AS4, AS4, AS4, AS4, AS4, AS4, AS4, AS4, 
  AS4, AS4, AS4, AS4, DS5, DS5, DS5, DS5, DS5, DS5, DS5, DS5, 
  C5, C5, C5, C5, DS5, DS5, DS5, DS5, DS5, DS5, DS5, AS3, 
  D5, D5, D5, D5, GS5, GS5, GS5, GS5, GS5, GS5, GS5, GS5, 
  G5, DS6, DS6, AS5, AS5, G5, G5, DS5, DS5, G5, AS5, CS6, 
  C6, F6, F6, C6, C6, A5, A5, F5, F5, A5, C6, DS6, 
  D6, G6, G6, D6, D6, B5, B5, G5, G5, B5, D6, F6, 
  DS6, C6, DS6, C6, DS6, C6, DS6, C6, DS6, C6, DS6, C6, DS6, C6, DS6, C6, D6, C6, D6, C6, D6, C6, D6, C6, D6, C6, D6, C6, D6, C6, D6, C6, 
  D6, AS5, D6, AS5, D6, AS5, D6, AS5, D6, AS5, D6, AS5, D6, AS5, D6, AS5, G6, AS5, G6, AS5, G6, AS5, G6, AS5, G6, AS5, G6, AS5, G6, AS5, G6, AS5, 
  G6, GS5, G6, GS5, G6, GS5, G6, GS5, G6, GS5, G6, GS5, G6, GS5, G6, GS5, F6, GS5, F6, GS5, F6, GS5, F6, GS5, F6, GS5, F6, GS5, F6, GS5, F6, GS5, 
  F6, G5, F6, G5, F6, G5, F6, G5, F6, G5, F6, G5, F6, G5, F6, G5, DS6, C6, DS6, C6, DS6, C6, DS6, C6, DS6, C6, DS6, C6, DS6, C6, DS6, C6, 
  CS6, C6, CS6, C6, CS6, C6, CS6, C6, CS6, AS5, CS6, AS5, CS6, AS5, CS6, AS5, C6, AS5, C6, AS5, C6, AS5, C6, AS5, C6, GS5, C6, GS5, C6, GS5, C6, GS5, 
  AS5, GS5, AS5, GS5, AS5, GS5, AS5, GS5, AS5, G5, AS5, G5, AS5, G5, AS5, G5, GS5, G5, GS5, G5, GS5, G5, GS5, G5, GS5, F5, GS5, F5, GS5, F5, GS5, F5, 
  G5, F5, G5, F5, G5, F5, G5, F5, G5, DS5, G5, DS5, G5, DS5, G5, DS5, F5, DS5, F5, DS5, F5, DS5, F5, DS5, F5, CS5, F5, CS5, F5, CS5, F5, CS5, 
  E5, G5, E5, G5, E5, G5, E5, G5, F5, GS4, F5, GS4, F5, GS4, F5, GS4, G5, C5, G5, C5, G5, C5, G5, C5, GS5, C5, GS5, C5, GS5, C5, GS5, C5,  
  AS5, C5, AS5, C5, AS5, C5, AS5, C5, GS5, C5, GS5, C5, GS5, C5, GS5, C5, G5, C5, G5, C5, G5, C5, G5, C5,    F5, GS4, F5, GS4, F5, GS4, F5, GS4, 
  G4, G5, E5, G5, E5, G5, E5, G5, E5, G5, G5, G5, GS5, C5, GS5, C5, GS5, C5, GS5, C5,  
  GS4, CS5, F4, CS5, F4, CS5, F4, CS5, F4, F4, F4, F4, G5, CS5, G5, CS5, G5, CS5, G5, CS5, 
  G4, C5, DS4, C5, DS4, C5, DS4, C5, DS4, C5, C5, C5, C5, GS4, C5, GS4, C5, GS4, C5, GS4, 
  F4, AS4, CS4, AS4, CS4, AS4, CS4, AS4, CS4, AS4, AS4, AS4, E5, G5, AS5, G5, E5, G5, AS5, G5, E5, G5, AS5, G5, E5, G5, AS5, G5, 
  GS5, GS5, C5, GS5, C5, GS5, C5, F5, F5, F5, F5, F5, F5, CS5, F5, CS5, F5, CS5, CS5, CS5, CS5, CS5, 
  C5, DS5, C5, DS5, C5, DS5, C5, C5, C5, C5, C5, GS4, F4, F4, C4, F4, C5, F4, F4, F4, F4, 
  F4, F4, CS4, F4, CS4, F4, CS4, F4, F4, F4, F4, C4, C4, C4, C4, C4,  DS4, C5, C5, C5, C5, C5, 
  GS3  
   
};

// note durations:
int noteDurations[] = {
  2, 2, 2, 2, 2, 2, 2, 2, 
  2, 2, 2, 2, 2, 2, 2, 2, 
  2, 2, 2, 2, 2, 2, 2, 2, 
  2, 2, 2, 2, 2, 2, 2, 2, 
  2, 2, 2, 2, 2, 2, 2, 2, 
  2, 2, 2, 2, 2, 2, 2, 2, 
  2, 2, 2, 2, 2, 2, 2, 2, 
  2, 2, 2, 2, 2, 2, 2, 2, 
  2, 2, 2, 2, 2, 2, 2, 2, 
  2, 2, 2, 2, 2, 2, 2, 2, 
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 2, 2, 2, 
  2, 2, 2, 2, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
  2, 2, 2, 2, 2, 2, 2, 2,
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 2, 2, 2, 2, 
  8, 8, 8, 8, 8, 8, 8, 8, 
  4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
  4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
  4, 4, 4, 4, 4, 4, 4, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 
  4, 4, 4, 4, 4, 4, 4, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 
  4, 4, 4, 4, 4, 4, 4, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 
  4, 4, 4, 4, 4, 4, 4, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8 ,4, 4, 4, 
  4, 4, 4, 4, 4, 4, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 2, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,  
  2, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,    
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 2, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,   
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,       
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 
  //39:
  2, 2, 2, 2, 2, 2, 2, 2, 
  2, 2, 2, 2, 2, 2, 2, 2, 
  2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 
  2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 
  2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 
  4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 
  4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 
  4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 
  4, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
  4, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
  4, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
  4, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 
  4, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 
  4, 8, 8, 8, 8, 8, 8, 4, 4 ,4, 4, 4, 4, 8, 8, 8, 8, 4, 4, 4, 4, 
  4, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 
  1
   
  
   
};

void setup() {
  for (int thisNote = 0; thisNote < 1277; thisNote++) {
    int noteDuration = 700 / noteDurations[thisNote];
    tone(8, melody[thisNote], noteDuration);
    int pauseBetweenNotes = noteDuration * 1.30;
    delay(pauseBetweenNotes);
    noTone(8);
  }
}

void loop() {
  // no need to repeat the melody.
}
